(*
MM2MS
=======
The core for out minimap to mainscreen projection.
*)
type
  TMinimapToMS = record
    BASE_W, BASE_H: Int32;      // the size of the area we project to - static
    ACTUAL_W, ACTUAL_H: Int32;  // used only for mainscreen center.
    SCALE: Double;              // direct zoom (relates to BASE)
    MMCX, MMCY: Int32;          // minimap center
  end;


const
  // Fixed OSRS client
  MM2MS_FIXED_CLIENT: TMinimapToMS = [
    513, 335,
    516, 340,
    1,
    642, 84
  ];
  
  // Resizable OSRS within smart [so it's fixed]
  MM2MS_RESIZABLE_CLIENT1: TMinimapToMS = [
    513, 335,
    775, 513,
    1.1,
    693, 85
  ];


var
  MM2MS: TMinimapToMS = MM2MS_FIXED_CLIENT;


function TMinimapToMS.Transform(coord: Vector3; matrix: TMatrix4): Vector3;
var p: Vector3;
begin
  p := Vector3.TransformCoordinate(coord, matrix);
  Result.x := (+p.X * BASE_W * SCALE) + ACTUAL_W/2;
  Result.y := (-p.Y * BASE_H * SCALE) + ACTUAL_H/2;
end;

function TMinimapToMS.Project(coords: Vector3Array; Rotation: Vector3): TPointArray;
var
  vec: Vector3;
  viewMatrix, projMatrix, worldMatrix,transMatrix: TMatrix4;
begin
  viewMatrix := TMatrix4.LookAtRH([0,-22,52], [0,0,0], Vector3_UnitY);
  projMatrix := TMatrix4.PerspectiveFovRH(Sqrt(2), 765/503, 0.01, 1.0);

  worldMatrix := TMatrix4.RotationYawPitchRoll(Rotation.Y, Rotation.X, Rotation.Z) * Matrix_Identity;
  transMatrix := worldMatrix * viewMatrix * projMatrix;
  for vec in coords do
  begin
    vec := Transform(vec, transMatrix);
    Result += Point(Round(vec.x),Round(vec.y));
  end;
end;

function TMinimapToMS.Run(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray;
var
  i: Int32;
begin
  for i:=0 to High(Arr) do
    Arr[i] := [Arr[i].x - MMCX, (MMCY - Arr[i].y), Arr[i].z];
  
  Result := Project(Arr, Vec3(0, 0, PI*2 - Roll));
end;


// --------------------------------------------------------------------------------------------------------------
// Extend the minimap-funcionallity with MM2MS functions

// Takes array, returns projected array
function TMinimap.ArrToMs(Arr: Vector3Array; Roll:Single=$FFFF): TPointArray; overload;
var
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  for i:=0 to High(Arr) do
    Arr[i] := Arr[i].RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  
  Result := MM2MS.Run(Arr, Roll);
end;

function TMinimap.ArrToMs(Arr: TPointArray; Roll:Single=$FFFF): TPointArray; overload;
var
  VecArr: Vector3Array;
  i: Int32;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  
  SetLength(VecArr, Length(Arr));
  for i:=0 to High(Arr) do
  begin
    VecArr[i].x := Arr[i].x;
    VecArr[i].y := Arr[i].y;
    VecArr[i] := VecArr[i].RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  end;
  Result := MM2MS.Run(VecArr, Roll);
end;


// Takes single point, returns single point
function TMinimap.VecToMs(Vec: Vector3; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);
  
  Result := MM2MS.Run([Vec], Roll)[0];
end;

function TMinimap.PointToMs(PT: TPoint; Roll:Single=$FFFF): TPoint;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));
  
  Result := MM2MS.Run([Vec3(PT.x, PT.y)], Roll)[0];
end;


// Takes single point, returns a rectangle
function TMinimap.PointToMsRect(PT: TPoint; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));
  
  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

function TMinimap.VecToMsRect(Vec: Vector3; Roll:Single=$FFFF): TRectangle;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  Vec := Vec.RotateXY(PI*2 - Roll, MM2MS.MMCX, MM2MS.MMCY);

  Arr := MM2MS.Run([Vec3(Vec.x-2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y-2, Vec.z), Vec3(Vec.x+2, Vec.y+2, Vec.z), Vec3(Vec.x-2, Vec.y+2, Vec.z)], Roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;


// Takes single point, returns a box
function TMinimap.PointToMsBox(PT: TPoint; Roll:Single=$FFFF): TBox;
var
  arr: TPointArray;
begin
  if (Roll = $FFFF) then Roll := Self.GetCompassAngle(False);
  PT := PT.Rotate(PI*2 - Roll, Point(MM2MS.MMCX, MM2MS.MMCY));
  
  Arr := MM2MS.Run([Vec3(PT.x-2, PT.y-2), Vec3(PT.x+2, PT.y-2), Vec3(PT.x+2, PT.y+2), Vec3(PT.x-2, PT.y+2)], Roll);
  Result := GetTPABounds(arr);
end;
