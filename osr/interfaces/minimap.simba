const
  DIR_NORTH = 0.00;
  DIR_EAST  = 90.0;
  DIR_SOUTH = 180.0;
  DIR_WEST  = 270.0;

type
  EMinimapOrb = (MMOrbHP, MMOrbPrayer, MMOrbRun);
  EMinimapDotType = (MMDotPlayer, MMDotItem, MMDotNPC);

type
  TMMOrbInfo = record
    TextBox: TBox;
    Middle: TPoint;
    Radius: Byte;
 end;

type
  TMMCompassInfo = record
    Middle: TPoint;
    Bounds: TBox;
    Radius: Byte;
 end;

type
  TMinimap = record(TInterfaceBase)
    CompassInfo: TMMCompassInfo;
    OrbInfo: array [EMinimapOrb] of TMMOrbInfo;
    MaskBMP: Integer;
    MaskTPA: TPointArray;
    Center:TPoint;
 end;

var
  Minimap: TMinimap;

procedure TMinimap.__Free();
begin
  if (BitmapExists(Self.MaskBMP)) then
    FreeBitmap(Self.MaskBMP);
end;

procedure TMinimap.__Setup();
begin
  with (Self) do
  begin
    SetName('Minimap');
    SetStatic(True);
    SetBounds([570, 9, 716, 157]);
    Center := [642, 84];
    
    with (CompassInfo) do
    begin
      Bounds := [545, 4, 576, 36];
      Middle := [561, 20];
      Radius := 15;
    end;

    with (OrbInfo[Ord(MMOrbHP)]) do
    begin
      Middle := [555, 57];
      Radius := 13;
      TextBox := [520, 55, 539, 68];
    end;

    with (OrbInfo[Ord(MMOrbPrayer)]) do
    begin
      Middle := [557, 101];
      Radius := 11;
      TextBox := [521, 99, 540, 112];
    end;

    with (OrbInfo[Ord(MMOrbRun)]) do
    begin
      Middle := [581, 136];
      Radius := 11;
      TextBox := [545, 135, 564, 148];
    end;

    AddOnTerminate(@Self.__Free);

    MaskBMP := BitmapFromString(147, 149, 'meJzt1cGOhCAUBdH+/5+emZXp' +
              'jIqIwnsFdVPbTlpO0M9nnv0UF/3vll6Z5smin2zO9fNSsMdGein4f' +
              'A+O+jQF++0hTXMKtq360LqnYOWSeDULRp9fwHJ6tQlGn+W45fe6Kx' +
              'h9ot1HJFucj062IN9MZOvwzao2t93EZJV80QK3twjZZHyrkdXwRZt' +
              'cb2U1rt3iZJd80T4H86JV2qXiU41opxrRTrInfKohSmKnGtFONaid' +
              'au/aqUZpvJ1qRDs/bV3hOtmpBrVTjQin2ki+TmrC9YZ7xU41qJ1qU' +
              'XaqUXrRTjginGpQO+GIcKoR7Y5+a2Fw9XaqZbNTjVKDnXAZugunWp' +
              '5u2amWKuGgVcL5nsxW5dtStYQJB+0Szvdkzi7flqqlTThowkErwPm' +
              'By1zhM6da5oSDdgbnezJ5NXDhf9L2CQfNDxw04aAJB004aMJBEw6a' +
              'cNCEgyYcNOGgCQdNOGjCQTuD0y5zBTXhMiccNOGgCQdNOGj1cNrla' +
              'b/PbsIl7FJNuJwJB004aMJBEw7aXTjtMrTfIZyXLluVal66VNVfN+' +
              'FSdQvOt2Webql56ZJ097oJl6QGON+WGWpQ89KF13bdhAuvGU47qJp' +
              'wXDjtoGrCceG0g6rt4eQbRvYQ7tAu/DHn63U17bhq2nHVDuG0Q8Bp' +
              'N4bsdTXtuGracdXk45Jph1Yr2ClY6RWlJh+XbJt2RLXvaVdWi/a52' +
              'LK3D3TFzrag3QRq2xbhm4lsW/Gh8JUXffYvbEq7ucm2zXT1pr9o+0' +
              '1gtxrZ97h8y5JtI8Kptg1kJ9m/IexUO1tmO8nKy2mnWs2y2alWvyS' +
              'fPD9qDQu3U615gXaqPVweuOiT4C0DXPQZUDfYTrUXFwUX/dwzbDxc' +
              '9BNPsjGXzuv2+gZ86fy6dVpXO9X6bXe2vdSEe3fCcXdwxB0W/ZRzT' +
              'jX0JONONeiE4061v/0CYW7pQw==');


    SetBitmapName(Self.MaskBMP, 'Minimap mask');
    FindColorsBitmap(Self.MaskBMP, Self.MaskTPA, $000000);
    OffsetTPA(Self.MaskTPA, Point(Self.FBounds.X1, Self.FBounds.Y1));
  end;
end;

(*
Minimap.GetMiddle
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetMiddle(): TPoint;

Returns the center of the minimap
*)
function TMinimap.GetMiddle(): TPoint; override;
begin
  Result := Self.Center;
end;


function TMinimap._GetOrbValue(const orb: EMinimapOrb): Integer;
const
  IgnoreCols = [4938344, 0];
  Font = 'StatChars07';
var
  ATPA: T2DPointArray;
  TextTPA: TPointArray;
  Text: String;
  i: Int32;
begin
  SetLength(ATPA, Length(IgnoreCols));
  for i:=0 to High(IgnoreCols) do
    FindColors(ATPA[i], IgnoreCols[i], OrbInfo[Ord(orb)].TextBox);
  
  TextTPA := MergeATPA(ATPA);
  if Length(TextTPA) > 0 then
  begin
    TextTPA := ReturnPointsNotInTPA(TextTPA, OrbInfo[Ord(orb)].TextBox);
    // look into a better fix
    Text := StringReplace(srl.GetTextFromTPA(TextTPA, 1, 3, 100, Font), 'O', '0', [rfReplaceAll]);
    Result := StrToIntDef(Text, 0);
  end;
end;

(*
Minimap.GetPrayerLevel
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetPrayerLevel(): Integer;

Returns your current prayer level
*)
function TMinimap.GetPrayerLevel(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbPrayer);
end;

(*
Minimap.GetHPLevel
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetHPLevel(): Integer;

Returns your current HP level
*)
function TMinimap.GetHPLevel(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbHP);
end;

(*
Minimap.GetHPPercent
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetHPPercent(): Byte;

Returns your current HP level as a percentage `0..100`
*)
function TMinimap.GetHPPercent(): Byte;
var
  tb, b: TBox;
  TPA: TPointArray;
begin
  with Minimap.OrbInfo[ord(MMOrbHP)] do
    b := [Middle.X - Radius, Middle.Y - Radius, Middle.X + Radius, Middle.Y + Radius];
  FindColorsTolerance(TPA, 1250067, b, 20);
  tb := GetTPABounds(TPA);
  Result := 100 - Ceil((tb.y2 - tb.y1) / (b.y2 - b.y1) * 100);
end;

(*
Minimap.GetRunEnergy
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetRunEnergy(): Integer;

Returns your current energy level 
*)
function TMinimap.GetRunEnergy(): Integer;
begin
  Result := Self._GetOrbValue(MMOrbRun);
end;

(*
Minimap.isPrayerEnabled
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.isPrayerEnabled(const Time: UInt32 = 0): Boolean;

Returns `True` if you have enabled it otherwise `False`.
*)
function TMinimap.isPrayerEnabled(const Time: UInt32 = 0): Boolean;
var
  b: TBox;
begin
  with (Self.OrbInfo[Ord(MMOrbPrayer)].Middle) do
    b := [X - 7, Y - 7, X + 7, Y + 7];

  if (Time = 0) then
    Result := (CountColorTolerance(15988210, b, 21) > 15)
  else
    Result := srl.WaitColorCount([15988210, 21], b, @GreaterThan, 15, Time);
end;

(*
Minimap.isRunEnabled
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.isRunEnabled(WaitTime: UInt32 = 0): Boolean;

Returns `True` if you have enabled it otherwise `False`.
*)
function TMinimap.isRunEnabled(WaitTime: UInt32 = 0): Boolean;
var
  b: TBox;
begin
  with (Self.OrbInfo[MMOrbRun].Middle) do
    b := [X - 8, Y - 8, X + 8, Y + 15];
  Result := srl.WaitColorCount([101547, 40], b, @GreaterThan, 5, WaitTime);
end;

(*
Minimap.TogglePrayer
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.TogglePrayer(const Enable: Boolean): Boolean;

A toggle to enable or disable prayer.
*)
function TMinimap.TogglePrayer(const Enable: Boolean): Boolean;
var t: TCountDown;
begin
  if (Enable = Self.isPrayerEnabled()) then Exit(True);
  with (Self.OrbInfo[Ord(MMOrbPrayer)]) do
  begin
    Mouse.Click(Middle, Radius, mouse_Left);
    t.Init(1000);
    while (not t.IsFinished()) and (Self.isPrayerEnabled() <> Enable) do
      Wait(40);
    Result := Self.isPrayerEnabled() = Enable;
  end;
end;

(*
Minimap.ToggleRun
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.ToggleRun(const Enable: Boolean): Boolean;

A toggle to enable or disable running.
*)
function TMinimap.ToggleRun(const Enable: Boolean): Boolean;
var t: TCountDown;
begin
  if (Enable = Self.isRunEnabled()) then Exit(True);
  with (Self.OrbInfo[Ord(MMOrbRun)]) do
  begin
    Mouse.Click(Middle, Radius, mouse_Left);
    t.Init(1000);
    while (not t.IsFinished()) and (Self.isRunEnabled() <> Enable) do
      Wait(40);
    Result := Self.isRunEnabled() = Enable;
  end;
end;

(*
Minimap.isPlayerMoving
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.isPlayerMoving(MinShift: Integer = 300): Boolean;

Returns `True` if your character is moving.
*)
function TMinimap.isPlayerMoving(MinShift: Integer = 300): Boolean;
var
  m: TPoint;
begin
  m := Self.GetMiddle();
  Result := srl.GetPixelShift([m.x - 35, m.y - 35, m.x + 35, m.y + 35], 350) > MinShift;
end;


(*
Minimap.FindFlag
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.FindFlag(out p: TPoint): Boolean;

Locate the current postion of the flag on the minimap, returns `False` if it can't be found.
*)
function TMinimap.FindFlag(out p: TPoint): Boolean;
const
  PoleColor = 1127261;
  FlagColor = 255;
  LightPoleColor = 284358;
var
  pt: TPoint;
  TPA, TPAPoles, column: TPointArray;
  w, h, img: Integer;
begin
  p := [-1, -1];
  Img := BitmapFromClient(Self.getBounds());
  SetBitmapName(Img, 'Find flag bitmap');
  GetBitmapSize(Img, w, h);

  try
    if (not FindColorsBitmap(Img, TPA, PoleColor)) then
      Exit(False);

    with GetMufasaBitmap(Img) do
      for pt in TPA do
        if (pt.X > 2) and (pt.Y > 2) and (pt.X < w) and (pt.Y < h) then
          if (GetPixel(pt.x - 1, pt.y) = FlagColor) or (GetPixel(pt.x - 1, pt.y) = LightPoleColor) and
             (GetPixel(pt.X, pt.y - 1) = PoleColor) or (GetPixel(pt.x, pt.y + 1) = PoleColor) then
                TPAPoles += pt;

    if (Length(TPAPoles) = 0) then
      Exit(False);
    
    for column in FindTPAColumns(TPAPoles) do
    begin
      for TPA in SplitTPA(column, 1) do
        if (InRange(GetTPABounds(TPA).Height, 4, 20)) then
        begin
          Result := True;
          p := TPA[0];

          while (p.y < (Self.GetBounds().Height - 1)) and (FastGetPixel(Img, p.x, p.y) = PoleColor) do
            Inc(p.y);

          if (FastGetPixel(Img, p.x, p.y) <> PoleColor) then // Make sure we have the bottom of the pole
            Dec(p.y);
        end;
    end;
  finally
    FreeBitmap(Img);
  end;

  Inc(p.x, Self.GetBounds().X1);
  Inc(p.y, Self.GetBounds().Y1);
end;

(*
Minimap.isFlagPresent
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.isFlagPresent(const WaitTime: UInt32 = 0): Boolean;

Returns True if the flag can be found on the minimap.. otherwise False.
*)
function TMinimap.isFlagPresent(const WaitTime: UInt32 = 0): Boolean;
var
  TimeOut: UInt64;
  p: TPoint;
begin
  Result := False;
  TimeOut := GetTickCount64() + WaitTime;

  repeat
    if (Self.FindFlag(p)) then
      Exit(True);

    Wait(Random(50, 200));
  until (GetTickCount64() > TimeOut);
end;

(*
Minimap.WaitFlag
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMinimap.WaitFlag(const Dist: UInt32 = 0; ExitIfNotMoving: Boolean = True);

Wait while the flag is present, can return early if the position from it to minimap center is less
than `dist`.
*)
procedure TMinimap.WaitFlag(const Dist: UInt32 = 0; ExitIfNotMoving: Boolean = True);
var
  TimeOut: UInt64;
  d, LastDist, SameDists: UInt32;
  p: TPoint;
begin
  TimeOut := GetTickCount64() + Random(23000, 25000);
  LastDist := 500;
  SameDists := 0;

  while (TimeOut > GetTickCount64()) and (Self.FindFlag(p)) do
  begin
    d := Distance(p, Self.getMiddle());
    if (d <= Dist) then
      Exit();

    if (d = LastDist) then
      Inc(SameDists)
    else
      SameDists := 0;

    if (ExitIfNotMoving) and (SameDists >= 20) then
      Exit();

    LastDist := d;
    Wait(Random(50, 100));
  end;
end;

(*
Minimap.WaitPlayerMoving
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    procedure TMinimap.WaitPlayerMoving(UseFlag: Boolean = True; TimeOut: Integer = 30000; MinShift: Integer = 300);

Waits till your character is no longer moving.
*)
procedure TMinimap.WaitPlayerMoving(UseFlag: Boolean = True; TimeOut: Integer = 30000; MinShift: Integer = 300);
var
  t: UInt64;
begin
  t := GetTickCount64() + TimeOut;
  while (t > GetTickCount64()) do
  begin
    if (UseFlag) and (Self.isFlagPresent()) then
      Self.WaitFlag;
    if (not Self.isPlayerMoving(MinShift)) then
      Exit;
    Wait(Random(100, 200));
  end;
end;

(*
Minimap.WaitFlagEx
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TMinimap.WaitFlagEx(MaxDist: Byte = 5): Boolean;

Extra WaitFlag method that Waits for the flag to disapear but will return if the
position we walked to is where the flag was first clicked.

  - Useful to know if you were able to walk into a room or not (blocked entrance, etc).
  - MaxDist param is default, but is the max distance the flag can move else we result False.

Example:

.. code-block:: pascal

    if (Minimap.WaitFlagEx()) then
      srl.Writeln('We have walked to the position succesfully')
    else
      srl.Writeln('We have finished walking, but the flag moved alot so we didnt hit our target pos');
*)
function TMinimap.WaitFlagEx(MaxDist: Byte = 5): Boolean;
var
  OldPt, NewPt: TPoint;
  t: UInt64;
  Found: Boolean;
begin
  Result := True;

  t := GetTickCount64() + Random(2500, 3500);
  while (not (Found := Self.FindFlag(OldPt))) and (t > GetTickCount64()) do
    Wait(Random(25, 50));

  if (not Found) then
    Exit(False);

  t := GetTickCount64() + Random(22000, 24000);
  while (FindFlag(NewPt)) and (t > GetTickCount64()) do
  begin
    if (Distance(OldPt, NewPt) > MaxDist) then
    begin
      Self.WaitFlag();
      Exit(False);
    end;

    OldPt := NewPt;
    Wait(Random(25, 50));
  end;
end;

(*
Minimap.GetCompassAngle
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.GetCompassAngle(AsDegrees:Boolean=True): Extended;

Returns the current compass angle, default as degrees.
*)
function TMinimap.GetCompassAngle(AsDegrees:Boolean=True): Extended;
var
  north,south: TPoint;
  M:TPoint := Self.CompassInfo.Middle;
  TPA:TPointArray;
begin
  if (not FindColorsTolerance(TPA, 1911089, Self.CompassInfo.Bounds, 25)) then
    Exit(srl.Writeln('Minimap.GetCompassAngle: Failed to find the `N` in the compass', 0.00));

  FilterPointsDist(TPA, 8, 15, M.x, M.y);
  if (Length(TPA) = 0) then
    Exit(srl.Writeln('Minimap.GetCompassAngle: Failed to find the `N` in the compass (after filter)', 0.00));
  north := MiddleTPA(SplitTPA(TPA,3)[0]);
  south := RotatePoint(north, PI, M.x, M.y);
  if (not FindColorsTolerance(TPA, 920735, Self.CompassInfo.Bounds, 25)) then
    Exit(srl.Writeln('Minimap.GetCompassAngle: Failed to find red compass dots color', 0.00));
  
  FilterPointsDist(TPA, 0,6, south.x,south.y);
  SortTPAFrom(TPA, M);
  if (Length(TPA) > 0) then
  begin
    Result := FixRad(ArcTan2(TPA[high(tpa)].y-M.y, TPA[high(tpa)].x-M.x) - (PI/2));
    if (Result <> 0) then Result += 0.0333; //compass dial is floored.. this makes us more accurate.
  end
  else
    srl.Writeln('Minimap.GetCompassAngle: Failed to find compass dial color');

  if (AsDegrees) then
    Result := Degrees(Result);
end;


(*
Minimap.MouseSetCompassAngle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.MouseSetCompassAngle(Angle, Tolerance: Extended): Boolean;

Some long code that does stuff.
*)
function TMinimap.MouseSetCompassAngle(Angle, Tolerance: Extended): Boolean;
  procedure MoveRotate(xs, ys, xe, ye, Angle, Tolerance: Extended);
  const
    sqrt2 := sqrt(2);
    sqrt3 := sqrt(3);
    sqrt5 := sqrt(5);
  var
    veloX, veloY, windX, windY, veloMag, dist, randomDist, lastDist, D, compassDist: Extended;
    TargetArea, Wind, Gravity: Extended;
    lastX, lastY, Speed, W, TDist, rnd_xs, rnd_ys, maxDist, rand, rand2: Integer;
    maxStep, rCnc: Extended;
    t: UInt64;
    oldSpeed: Integer;
  begin
    oldSpeed := Mouse.GetSpeed();
    Mouse.SetSpeed(Random(20, 22));

    Speed := Mouse.GetSpeed();
    Gravity := Mouse.GetGravity(mouse_Human);
    Wind := Mouse.GetWind(mouse_Human);
    TargetArea := 10.0 * ((Random(Speed) / 2.0 + Speed) / 10.0);
    rand := Random(25, 40);
    rand2 := Random(7, 12);
    MaxDist := 15;
    TDist := Distance(Round(xs), Round(ys), Round(xe), Round(ye));
    t := GetTickCount64() + Random(7000, 8500);
    Mouse.Hold(mouse_Middle);

    repeat
      if (GetTickCount64() > t) then
        Break;

      dist := hypot(xs - xe, ys - ye);
      wind := minE(wind, dist);
      if (dist < 1) then
        dist := 1;

      D := (Round((Round(TDist)*0.3))/7);
      if (D > maxDist) then
        D := maxDist;
      if (D < 4) then
        D := 4;

      rCnc := random(6);
      if (rCnc = 1) then
        D := Random(2, 3);

      if (D <= Round(dist)) then
        maxStep := D
      else
        maxStep := round(dist);

      if (dist >= targetArea) then
      begin
        windX := windX / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
        windY := windY / sqrt3 + (random(round(wind) * 2 + 1) - wind) / sqrt5;
      end else
      begin
        windX := windX / sqrt2;
        windY := windY / sqrt2;
      end;

      veloX := veloX + windX;
      veloY := veloY + windY;
      veloX := veloX + gravity * (xe - xs) / dist;
      veloY := veloY + gravity * (ye - ys) / dist;

      if (hypot(veloX, veloY) > maxStep) then
      begin
        randomDist := maxStep / 2.0 + random(round(maxStep) div 2);
        veloMag := sqrt(veloX * veloX + veloY * veloY);
        veloX := (veloX / veloMag) * randomDist;
        veloY := (veloY / veloMag) * randomDist;
      end;

      lastX := round(xs);
      lastY := round(ys);
      xs := xs + veloX;
      ys := ys + veloY;
      rnd_xs := Round(xs);
      rnd_ys := Round(ys);

      if (lastX <> rnd_xs) or (lastY <> rnd_ys) then
        Mouse.SetPosition(Point(rnd_xs, rnd_ys));

      W := (Random((round(100/Speed)))*6);
      if (W < 4) then
        W := 4;
      W := Round(W * 0.4);

      Wait(W);
      LastDist := dist;
      CompassDist := Abs(srl.DeltaAngle(Self.GetCompassAngle(), Angle));
      if ((CompassDist < Rand) or (CompassDist < Rand2)) then
      begin
        if (CompassDist < Rand) then
          maxDist := Random(5, 8);
        if (CompassDist < Rand2) then
          maxDist := Random(2, 4);
      end else
        maxDist := 15; // Default

      if (CompassDist <= Tolerance) then
        Break;
    until (Hypot(xs - xe, ys - ye) < 1);

    Mouse.Release(mouse_Middle);
    Wait(Random(150, 250));

    Mouse.setSpeed(oldSpeed);
  end;

const
  MIN_Y_DROP = 105;
  MIN_X_MOVE = 130;

  RIGHT_START: TBox = [0, 0, 150, 380];
  RIGHT_END_START_X = [620, 675];

  LEFT_START: TBox = [600, 0, 765, 380];
  LEFT_END_START_X = [0, 140];

var
  CurrentAngle, AngleDistance: Extended;
  CompassDist: Extended;
  mp, p: TPoint;
  moveRight: Boolean;
  t: UInt64;
begin
  Result := False;

  Angle := FixD(Angle);
  CurrentAngle := Self.GetCompassAngle();
  CompassDist := Abs(srl.DeltaAngle(CurrentAngle, Angle));
  if (CompassDist <= 3) then
    Exit(True);

  t := GetTickCount64() + Random(5000, 7000);
  while (CompassDist > Tolerance) and (t > GetTickCount64()) do
  begin
    AngleDistance := CurrentAngle - Angle;
    moveRight := ((AngleDistance > 0) and (Abs(AngleDistance) <= 180)) or ((AngleDistance < 0) and (Abs(AngleDistance) > 180));
    mp := Mouse.GetPosition();

    if (moveRight) then
    begin
      if (not PointInBox(mp, GetClientBounds())) then
        Mouse.Move(RIGHT_START, False, rndRandom);

      if ((mp.x + MIN_X_MOVE) < RIGHT_END_START_X[0]) then
        { No need to move mouse! }
      else
        Mouse.Move(RIGHT_START, False, rndRandom);

      mp := Mouse.GetPosition();
      p.x := Random(RIGHT_END_START_X[0], RIGHT_END_START_X[1]);
      p.y := Random(mp.y + MIN_Y_DROP, GetClientBounds().Y2);
    end else // moveLeft
    begin
      if (not PointInBox(mp, GetClientBounds())) then
        Mouse.Move(LEFT_START, False, rndRandom);

      if ((mp.x - MIN_X_MOVE) > LEFT_END_START_X[1]) then
        { No need to move mouse! }
      else
        Mouse.Move(LEFT_START, False, rndRandom);

      mp := Mouse.GetPosition();
      p.x := Random(LEFT_END_START_X[0], LEFT_END_START_X[1]);
      p.y := Random(mp.y + MIN_Y_DROP, GetClientBounds().Y2);
    end;

    MoveRotate(mp.x, mp.y, p.x, p.y, Angle, Tolerance);
    CurrentAngle := Self.GetCompassAngle();
    CompassDist := Abs(srl.DeltaAngle(CurrentAngle, Angle));
  end;

  Result := CompassDist < Tolerance;
end;

(*
Minimap.SetCompassAngle
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

    function TMinimap.SetCompassAngle(Angle: Extended; UseMouse: Boolean = True; Tolerance: Integer = 5): Boolean;

Set the compass angle.
*)
function TMinimap.SetCompassAngle(Angle: Extended; UseMouse: Boolean = True; Tolerance: Integer = 5): Boolean;

  function Compass_Distance(Angle, Target: Extended): Extended;
  begin
    if (Abs(Target - Angle) < 180) then
    begin
      Result := Target - Angle;
      Exit;
    end;

    if (Target > Angle) then
      Result := Target - Angle - 360
    else
      Result := Target - Angle + 360;
  end;

  procedure Key(Left: Boolean);
  begin
    case (Left) of
      True:
        begin
          KeyUp(VK_RIGHT);
          KeyDown(VK_LEFT);
        end;
      False:
        begin
          KeyUp(VK_LEFT);
          KeyDown(VK_RIGHT);
        end;
    end;
  end;

var
  TimeOut: UInt64;
  CurrentAngle, AngleDistance: Extended;
  Left: Boolean;
begin
  if (UseMouse) then
    Exit(Self.MouseSetCompassAngle(Angle, Tolerance));

  Angle := FixD(Angle);
  CurrentAngle := Self.GetCompassAngle();
  if (CurrentAngle = Angle) then
    Exit(True);

  TimeOut := GetTickCount64() + Random(9000, 11000);
  while (Abs(Compass_Distance(CurrentAngle, Angle)) > Tolerance) and (GetTickCount64() < TimeOut) do
  begin
    AngleDistance := CurrentAngle - Angle;
    Left := ((AngleDistance > 0) and (Abs(AngleDistance) <= 180)) or ((AngleDistance < 0) and (Abs(AngleDistance) > 180));
    Key(Left);

    CurrentAngle := Self.GetCompassAngle();
    Result := Abs(Compass_Distance(CurrentAngle, Angle)) <= Tolerance;
    if (Result) then
      Break();

    Wait(Random(15, 30));
  end;

  if (GetTickCount64() >= TimeOut) then
    srl.Writeln('Minimap.SetCompassAngle(): Setting angle timed out');

  KeyUp(VK_LEFT);
  KeyUp(VK_RIGHT);

  Wait(Random(270, 420));
end;

function TMinimap.GetDots(DotType: EMinimapDotType; SortFromPlayer: Boolean = True): TPointArray;
const { aligned with EMinimapDotType }
  DOT_COL_DIFF = [1907997, 23, 4369];
  NPC_DOT_DIFF_2 = 1114626;
var
  pt: TPoint;
  img, w, h: Integer;
  TPA: TPointArray;
begin
  img := BitmapFromClient(Self.GetBounds());
  GetBitmapSize(img, w, h);
  w -= 2; h -= 2;

  try
    if (not FindColorsBitmap(img, TPA, 65536)) then
      Exit;

    for pt in TPA do
      if (pt.X > 2) and (pt.Y > 2) and (pt.X < w) and (pt.Y < h) then
        if (FastGetPixel(img, pt.X-1, pt.Y-1) - FastGetPixel(img, pt.X, pt.Y-1) = DOT_COL_DIFF[Ord(DotType)]) then
          Result += Point(pt.X, pt.Y - 2)
        else
        begin
          if (FastGetPixel(img, pt.X, pt.Y-2) - FastGetPixel(img, pt.X, pt.Y-1) = DOT_COL_DIFF[Ord(DotType)]) then
            Result += Point(pt.X - 1, pt.Y - 1)
          else if (DotType = MMDotNPC) then
          begin
            if (FastGetPixel(img, pt.X, pt.Y-2) - FastGetPixel(img, pt.X, pt.Y-1) = NPC_DOT_DIFF_2) then
              Result += Point(pt.X + 2, pt.Y - 1);
          end;
        end;

    if (Length(Result) > 0) then
    begin
      ClearDoubleTPA(Result);
      OffsetTPA(Result, Point(Self.GetBounds().X1, Self.GetBounds().Y1));
      if (SortFromPlayer) then
        SortTPAFrom(Result, Self.GetMiddle());
    end;
  finally
    FreeBitmap(img);
  end;
end;

function TMinimap.FindDots(DotType: EMinimapDotType; MinCount: UInt32 = 1): Boolean;
begin
  Result := Length(Self.GetDots(DotType, False)) >= MinCount;
end;

function TMinimap.isPointOn(pt: TPoint; Full: Boolean = True): Boolean;
var
  p: TPoint;
begin
  Result := False;

  if (PointInBox(pt, Self.getBounds())) then
  begin
    p := [pt.X - Self.GetBounds().X1, pt.Y - Self.GetBounds().Y1];
    if (GetMufasaBitmap(Self.MaskBMP).PointInBitmap(p.x, p.y)) then
    begin
      if (Full) then
        Result := (FastGetPixel(Self.MaskBMP, p.x, p.y) = $FFFFFF) or
                  (FastGetPixel(Self.MaskBMP, p.x, p.y) = $FF)
      else
        Result := FastGetPixel(Self.MaskBMP, p.x, p.y) = $FF;
    end;
  end;
end;

procedure TMinimap.FilterPoints(var TPA: TPointArray);
begin
  TPA := ClearTPAFromTPA(TPA, Self.MaskTPA);
end;

function TMinimap.FindDTMs(const DTM: Integer; out Matches: TPointArray; Step: Extended = 1.00; Range: UInt32 = 25): Boolean;

  function GetSearchAngles(TheAngle, TheRange: Extended): T2DExtendedArray;
  var
    StartA, EndA: Extended;
  begin
    StartA := (TheAngle - TheRange);
    EndA := (TheAngle + TheRange);

    SetLength(Result, 2);
    if (StartA < 0.00) then
    begin
      Result[0] := [360.0 + StartA, 360];
      Result[1] := [0.0, 0 + EndA];
    end else if (EndA > 360) then
    begin
      Result[0] := [StartA, 360];
      Result[1] := [0.0, 0 + Abs(EndA - 360)];
    end else
    begin
      SetLength(Result, 1);
      Result[0] := [StartA, EndA];
    end;
  end;

var
  SearchAngles, FoundAngles, tmp: T2DExtendedArray;
  i: integer;
  TPA: TPointArray;
begin
  SetLength(Matches, 0);
  SearchAngles := GetSearchAngles(Self.GetCompassAngle(), Range);

  for i := 0 to High(SearchAngles) do
    with Self.GetBounds() do
      if (FindDTMsRotatedSE(DTM, TPA, X1,Y1,X2,Y2, SearchAngles[i][0], SearchAngles[i][1], Step, tmp)) then
      begin
        Insert(tmp, FoundAngles, Length(FoundAngles));
        AppendTPA(Matches, TPA);
      end;

  Self.FilterPoints(Matches);
  Result := Length(Matches) > 0;
end;

function TMinimap.GetColorPercent(Color: Integer; Tolerance: Integer = 0): Integer;
var
  TPA, TPA2: TPointArray;
  Max: Integer;
begin
  FindColorsBitmap(Self.MaskBMP, TPA, $FFFFFF);
  FindColorsBitmap(Self.MaskBMP, TPA2, $FF);
  TPA.Extend(TPA2);
  Max := Length(TPA);
  FindColorsTolerance(TPA, Color, Self.GetBounds(), Tolerance);
  Self.FilterPoints(TPA);
  Result := Round((Length(TPA) / Max) * 100);
end;

function TMinimap.RandomCompass(MinMovement, MaxMovement: Integer; UseMouse: Boolean = True): Extended;
var
  a: Integer;
begin
  a := Round(Self.GetCompassAngle());
  if (Random(2) = 0) then
    a -= Random(MinMovement, MaxMovement)
  else
    a += Random(MinMovement, MaxMovement);
  Self.SetCompassAngle(FixD(a), UseMouse, Random(5, 10));
  Result := Self.GetCompassAngle();
end;

begin
  Minimap.__Setup();
end;
